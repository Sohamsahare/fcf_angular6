{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/landing/button/button.component.css","webpack:///./src/app/landing/button/button.component.html","webpack:///./src/app/landing/button/button.component.ts","webpack:///./src/app/landing/landing.component.css","webpack:///./src/app/landing/landing.component.html","webpack:///./src/app/landing/landing.component.ts","webpack:///./src/app/notfound/notfound.component.css","webpack:///./src/app/notfound/notfound.component.html","webpack:///./src/app/notfound/notfound.component.ts","webpack:///./src/app/play/card/card.component.css","webpack:///./src/app/play/card/card.component.html","webpack:///./src/app/play/card/card.component.ts","webpack:///./src/app/play/card/card.model.ts","webpack:///./src/app/play/play.component.css","webpack:///./src/app/play/play.component.html","webpack:///./src/app/play/play.component.ts","webpack:///./src/app/play/text/text.component.css","webpack:///./src/app/play/text/text.component.html","webpack:///./src/app/play/text/text.component.ts","webpack:///./src/app/play/timer/timer.component.css","webpack:///./src/app/play/timer/timer.component.html","webpack:///./src/app/play/timer/timer.component.ts","webpack:///./src/app/scores/scores.component.css","webpack:///./src/app/scores/scores.component.html","webpack:///./src/app/scores/scores.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/services/game.service.ts","webpack:///./src/services/scorecard.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LandingComponent } from './landing/landing.component';\nimport { NotFoundComponent } from './notfound/notfound.component';\nimport { PlayComponent } from './play/play.component';\nimport { ScoresComponent } from './scores/scores.component';\n\nconst routes: Routes = [\n  { path:'', redirectTo:'/home', pathMatch:'full' },\n  { path:'home', component:LandingComponent },\n  { path:'play', component:PlayComponent },\n  { path:'scores', component:ScoresComponent },\n  { path:'**',component:NotFoundComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from './landing/button/button.component';\nimport { LandingComponent } from './landing/landing.component';\nimport { NotFoundComponent } from './notfound/notfound.component';\nimport { PlayComponent } from './play/play.component';\nimport { ScoresComponent } from './scores/scores.component';\nimport { TimerComponent } from './play/timer/timer.component';\nimport { HttpClientModule} from '@angular/common/http';\nimport { ScoreCardService } from '../services/scorecard.service';\nimport { CardComponent } from './play/card/card.component';\nimport { TextComponent } from './play/text/text.component';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ButtonComponent,\n    LandingComponent,\n    NotFoundComponent,\n    PlayComponent,\n    ScoresComponent,\n    TimerComponent,\n    CardComponent,\n    TextComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [ScoreCardService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"button{\\r\\n    width: 10rem;\\r\\n    height: 5rem;\\r\\n    margin: .5rem;\\r\\n}\"","module.exports = \"<button type=\\\"button\\\" class=\\\"btn btn-info btn-lg\\\">{{name}}</button>\"","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.css']\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  @Input('name') name: string;\r\n  @Input('url') url:string;\r\n  \r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"h1{\\r\\n    color: aliceblue;\\r\\n}\\r\\np{\\r\\n    color: antiquewhite;\\r\\n}\\r\\n.body{\\r\\n    padding-top: 12rem;\\r\\n}\"","module.exports = \"<div class=\\\"body\\\">\\r\\n  <div class=\\\"text-center\\\">\\r\\n    <h1>Fastest Clicker First</h1>\\r\\n    <p class=\\\"lead\\\">How much can one click, before he runs out of clock ticks?</p>\\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"buttons d-flex flex-column text-center\\\">\\r\\n    <app-button *ngFor = \\\"let route of routes\\\" [name] = \\\"route.text\\\" [routerLink] = \\\"route.url\\\" ></app-button>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { ButtonRoute } from './buttonroute.model';\r\n\r\n@Component({\r\n  selector: 'app-landing',\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.css']\r\n})\r\nexport class LandingComponent implements OnInit {\r\n  routes : ButtonRoute[] = [\r\n    { text: 'PLAY', url: '/play' },\r\n    { text: 'SCORES', url: '/scores' }\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\n  Path entered is invalid. The page was not found.\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"div{\\r\\n    height: 14rem;\\r\\n    width: 14rem;\\r\\n    background-color: white;\\r\\n    display: inline-block;\\r\\n}\\r\\n\\r\\nbutton{\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    background-color: rgba(0, 0, 0, 0);\\r\\n}\\r\\n\\r\\nbutton:hover{\\r\\n    cursor: pointer;\\r\\n    background-color: rgba(0, 0, 0, .1);\\r\\n}\"","module.exports = \"<div class=\\\"card \\\" id = \\\"card_{{card.id}}\\\" >\\r\\n    <button (click)=\\\"onClick()\\\" id = \\\"button_{{card.id}}\\\"></button>\\r\\n</div>\"","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Card } from './card.model';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css']\n})\nexport class CardComponent {\n  // reference to model class\n  @Input() card : Card;\n\n  // let parent know it was clicked\n  @Output() clickEventEmitter = new EventEmitter();\n\n  ngAfterViewInit(){\n    // console.log(this.card.id);\n  }\n\n  onClick(){\n    if(this.card.isGreen){\n      this.clickEventEmitter.emit(true);\n    }\n    else{\n      this.clickEventEmitter.emit(false);\n    }\n  }\n}\n","export class Card{\r\n    id: number;\r\n    isGreen : boolean;\r\n}","module.exports = \".card-columns{\\r\\n    -webkit-column-count: 2;\\r\\n            column-count: 2;\\r\\n}\\r\\n.buttonContainer{\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    margin: 2rem;\\r\\n}\\r\\nbutton{\\r\\n    font-size: 2rem;\\r\\n}\\r\\n.lead{\\r\\n    color: white;\\r\\n    padding: .5rem;\\r\\n}\\r\\ninput{\\r\\n    margin: .5rem;\\r\\n}\"","module.exports = \"<div class=\\\"parent\\\">\\r\\n    <app-text [score] = \\\"score\\\"></app-text>\\r\\n    <div class = \\\"card-deck d-flex justify-content-center\\\" id  = \\\"play\\\" >\\r\\n        <app-card *ngFor = \\\"let card of cards\\\" [card]=\\\"card\\\" (clickEventEmitter)='getCardClick($event)'></app-card>\\r\\n    </div>\\r\\n    <div class=\\\"buttonContainer\\\">\\r\\n        <div  *ngIf=\\\"!hasGameStarted\\\">\\r\\n            <span class=\\\"lead\\\">Game Time:</span>\\r\\n            <input [(ngModel)]=\\\"gameTime\\\" type=\\\"number\\\" placeholder=\\\"In Minutes\\\" >\\r\\n            <!-- <span class=\\\"lead\\\">Number of Cards:</span>\\r\\n            <input [(ngModel)]=\\\"cardCount\\\" type=\\\"number\\\" placeholder=\\\"Atleast 4 cards\\\"> -->\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-success btn-lg\\\" (click)=\\\"play()\\\" >PLAY!</button>\\r\\n        </div>\\r\\n        <app-timer *ngIf=\\\"hasGameStarted\\\" [gameTime]=\\\"gameTime * 60 * 1000\\\" (time)=\\\"setTimerTime($event)\\\"></app-timer>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { Card } from './card/card.model';\r\nimport { ScoreCardService } from '../../services/scorecard.service';\r\nimport { Router } from '@angular/router';\r\nimport { GameService } from '../../services/game.service';\r\n\r\n@Component({\r\n  selector: 'app-play',\r\n  templateUrl: './play.component.html',\r\n  styleUrls: ['./play.component.css']\r\n})\r\n\r\nexport class PlayComponent implements AfterViewInit {\r\n\r\n  // variables used for binding data\r\n  score: number = 0;\r\n  cards: Card[];\r\n  hasGameStarted: boolean = false;\r\n  gameTime: number;\r\n  cardCount: number;\r\n\r\n  constructor(private scoreService: ScoreCardService, private router: Router, private gameService: GameService) {\r\n    this.cards = this.gameService.initialiseCards();\r\n  }\r\n\r\n  // called after all views are initialised\r\n  ngAfterViewInit() {\r\n  }\r\n\r\n  play() {\r\n    let time = this.gameTime * 60 * 1000;\r\n    this.gameService.timerInMs = time;\r\n    // this.gameService.cardcount = (this.cardCount > 3) ? this.cardCount : 4;\r\n    this.gameService.startGame();\r\n    setTimeout(() => { this.onEndGame(); }, time);\r\n    this.hasGameStarted = true;\r\n  }\r\n\r\n  // stops the interval for random cards\r\n  onEndGame() {\r\n    let scores = this.gameService.endGame();\r\n    this.scoreService.postScores(scores).subscribe(() => {\r\n      this.router.navigate(['scores']);\r\n    });\r\n  }\r\n\r\n  // used to fetch time from timer component\r\n  // and set it here\r\n  setTimerTime(time: number) {\r\n    this.gameService.timerInMs = time;\r\n  }\r\n\r\n  getCardClick(isClickedGreen: boolean) {\r\n    this.score = this.gameService.getCardClick(isClickedGreen);\r\n  }\r\n}\r\n","module.exports = \"h4{\\r\\n    margin: 2rem;\\r\\n    text-align: center;\\r\\n    color: whitesmoke;\\r\\n}\"","module.exports = \"<h4>\\nScore: {{score}}\\n</h4>\\n\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-text',\n  templateUrl: './text.component.html',\n  styleUrls: ['./text.component.css']\n})\nexport class TextComponent   {\n  // to set score from parent class\n  @Input() score : number;\n}\n","module.exports = \".timer-container{\\r\\n    padding : 1rem;\\r\\n    border: 1px solid black;\\r\\n    width : 10rem;\\r\\n    background-color: #5FFF4F;\\r\\n    margin: 2rem;\\r\\n    /* position: relative;\\r\\n    left: 42.5%; */\\r\\n}\"","module.exports = \"<div class=\\\"timer-container d-flex \\\" id = \\\"timer-box\\\" >\\r\\n    <h3>\\r\\n      {{getMinutes()}} : {{getSeconds()}} : {{getMiniSeconds()}}\\r\\n    </h3>\\r\\n</div>\"","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-timer',\r\n  templateUrl: './timer.component.html',\r\n  styleUrls: ['./timer.component.css']\r\n})\r\n\r\nexport class TimerComponent implements OnInit {\r\n  // used to pass time remaining from timer to\r\n  // parent class\r\n  @Output() time = new EventEmitter();\r\n  // @Output() initialTime = new EventEmitter();\r\n  // initialises timer to this amount of time in ms\r\n  timeInMilliseconds: number;\r\n  @Input() gameTime: number = 1000 * 10;\r\n  // how fast to update the time in the timer in ms\r\n  private timeInterval : number = 10;\r\n  // used to clear setInterval calls\r\n  private timerIntervalId : any;\r\n  private colourIntervalId : any;\r\n\r\n  // timer colour changes from green to these colours every 1/3rd initialTime\r\n  private colours: string[] = ['#FFFF00','#DC3545'];\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    //this.initialTime.emit(this.gameTime);\r\n    this.startTimer();\r\n  }\r\n\r\n  getMinutes() : number{\r\n    return Math.floor(this.timeInMilliseconds / (1000 * 60)) ;    \r\n  }\r\n\r\n  getSeconds() : number{\r\n    return Math.floor(((this.timeInMilliseconds % 100000) / 1000)) ;    \r\n  }\r\n\r\n  getMiniSeconds() : number{\r\n    return Math.round(((this.timeInMilliseconds % 1000) / (10)) * 100) / 100;   \r\n  }\r\n\r\n  startTimer(){\r\n    this.timeInMilliseconds = this.gameTime;\r\n    this.timerIntervalId =  setInterval(() => {\r\n      this.timeInMilliseconds -= this.timeInterval;\r\n      this.emitTimer()\r\n      if(this.timeInMilliseconds <= 0 ){\r\n        this.stopTimer();\r\n      }\r\n    },this.timeInterval);\r\n    let colourId = 0;\r\n    this.colourIntervalId = setInterval(() =>{\r\n      let bgColour = document.getElementById('timer-box');\r\n      bgColour.style.backgroundColor = this.colours[colourId] ;\r\n      colourId++;  \r\n    }\r\n      , (this.gameTime/3));\r\n  }\r\n\r\n  emitTimer(){\r\n    this.time.emit(this.timeInMilliseconds);\r\n  }\r\n\r\n  stopTimer(){\r\n    clearInterval(this.timerIntervalId);\r\n    clearInterval(this.colourIntervalId);\r\n  }\r\n}\r\n","module.exports = \".table{\\r\\n    width: 80%;\\r\\n    position: relative;\\r\\n    left:10%;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"body d-flex justify-content-center flex-column \\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-info btn-lg\\\" [routerLink]=\\\"['/home']\\\">HOME</button>\\n  <table class=\\\"table table-hover table-light table-striped table-bordered\\\">\\n    <thead class=\\\"thead-dark\\\">\\n      <tr>\\n        <th scope=\\\"col\\\">GameId</th>\\n        <th scope=\\\"col\\\">PlayedAt</th>\\n        <th scope=\\\"col\\\">MaxMultiplier</th>\\n        <th scope=\\\"col\\\">Score</th>\\n      </tr>\\n    </thead>\\n    <tbody >\\n      <tr *ngFor=\\\" let score of scores; index as i;\\\">\\n        <th scope=\\\"row\\\">{{i+1}}</th>\\n        <td>{{score.playedAt}}</td>\\n        <td>{{score.maxMultiplier}}</td>\\n        <td>{{score.score}}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Scores } from './scores.model';\nimport { ScoreCardService } from '../../services/scorecard.service';\n\n@Component({\n  selector: 'app-scores',\n  templateUrl: './scores.component.html',\n  styleUrls: ['./scores.component.css']\n})\nexport class ScoresComponent implements OnInit {\n\n  scores : Scores[] ;\n  constructor(private ScoreCardService : ScoreCardService) { }\n\n  ngOnInit() {\n    this.ScoreCardService.getScores().subscribe((scoresDb : Scores[]) => {\n      this.scores = scoresDb;\n    })\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Card } from '../app/play/card/card.model';\nimport { Scores } from '../app/scores/scores.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n  // subtract 1 from this number as array indices start from 0\n  private lastRandomNumber: number = 1;\n  // after how many ms does a card change\n  private initialTimeToRandom = 2000;\n  // maximum gameSpeed -> 3 changes per second\n  private minTimeToRandom = 333;\n  // timestep to increase the game speed by in ms\n  private timeStep = 250;\n  // to clear setInterval() calls\n  private randomCardIntervalId: any;\n  // score works like = baseScore * scoreMultiplier\n  // score multiplier increases with game speed\n  private scoreMultiplier: number = 1;\n  private baseScore: number = 10;\n  // on incorrect click, points are deducted from the score\n  private penaltyScore: number = 20;\n  // maxMultiplier achieved in a game session\n  private maxMultiplier: number = this.scoreMultiplier;\n  // count after which gameSpeed increases\n  private gameSpeedIncrementClicks = 3;\n  // time game session started at\n  private timePlayedAt: string;\n  // to toggle game logic\n  private isGameRunning: boolean;\n\n  // variables used for binding data\n  score: number = 0;\n\n  private _timerInMs: number = 1000;\n\n  public get timerInMs(): number {\n    return this._timerInMs;\n  }\n  public set timerInMs(value: number) {\n    this._timerInMs = value;\n  }\n\n  // determines number of cards in game\n  cardcount: number = 4;\n  cards: Card[] = new Array(this.cardcount).fill({ id: 0, isGreen: false });\n\n  // time after which card colour changes when player\n  // doesn't click on it\n  timeToRandomInMs: number = this.initialTimeToRandom;\n\n  // to handle scores and gameSpeed\n  countSuccessClicks: number = 0;\n\n\n  constructor(private router: Router) {\n    let date = new Date();\n    this.timePlayedAt = date.toLocaleTimeString() + \" \" + date.toLocaleDateString();\n  }\n\n  //  sets initial values to all cards\n  initialiseCards() {\n    this.randomCard();\n    for (let card = 0; card < this.cards.length; card++) {\n      this.cards[card] = { id: card + 1, isGreen: (card == this.lastRandomNumber - 1) ? true : false };\n    }\n    return this.cards;\n  }\n\n  //randomly selects a card from the pool\n  randomCard() {\n    let randomNumber: number = Math.floor(Math.random() * (this.cardcount) + 1);\n    while (randomNumber == this.lastRandomNumber) {\n      randomNumber = Math.floor(Math.random() * (this.cardcount) + 1);\n    }\n    this.lastRandomNumber = randomNumber;\n    return randomNumber;\n  }\n\n  // called after all views are initialised\n  startGame() {\n    this.isGameRunning = true;\n    this.randomWithNewTime();\n  }\n\n  randomWithNewTime() {\n    // randomly selects a card\n    this.randomiseCards();\n    // every timeToRandomInMs milliseconds cards are randomised\n    this.randomCardIntervalId = setInterval(() => { this.randomiseCards() }, this.timeToRandomInMs);\n  }\n\n  // randomly selects a card and\n  // changes old card to white and new card to green\n  randomiseCards() {\n    this.cards[this.lastRandomNumber - 1].isGreen = false;\n    let elem = document.getElementById(\"card_\" + this.cards[this.lastRandomNumber - 1].id);\n    elem.style.backgroundColor = 'white';\n    let randomId: number = this.randomCard();\n    this.cards[randomId - 1].isGreen = true;\n    elem = document.getElementById(\"card_\" + this.cards[randomId - 1].id);\n    elem.style.backgroundColor = 'green';\n  }\n\n  // stops the interval for random cards\n  endGame() {\n    let scores: Scores = {\n      playedAt: this.timePlayedAt,\n      maxMultiplier: this.maxMultiplier,\n      score: this.score\n    };\n    this.isGameRunning = false;\n    // clear all setInterval calls  \n    clearInterval(this.randomCardIntervalId);\n    for (let i = 0; i < this.cards.length; i++) {\n      let id = i + 1;\n      let btn = <HTMLInputElement>document.getElementById(\"button_\" + id);\n      btn.disabled = true;\n    }\n    return scores;\n  }\n\n  getCardClick(isClickedGreen: boolean) {\n    console.log(\"GameSpeed: \" + this.timeToRandomInMs / 1000 + \" Multiplier: \" + this.scoreMultiplier + \"x the base score \" + this.baseScore);\n    if (this.isGameRunning) {\n      if (isClickedGreen) {\n        this.countSuccessClicks++;\n        if (this.countSuccessClicks >= this.gameSpeedIncrementClicks) {\n          this.timeToRandomInMs -= this.timeStep;\n          if (this.timeToRandomInMs <= this.minTimeToRandom) {\n            this.timeToRandomInMs = this.minTimeToRandom;\n          }\n          this.handleMultiplier();\n        }\n        clearInterval(this.randomCardIntervalId);\n        this.randomWithNewTime();\n        this.score += this.baseScore * this.scoreMultiplier;\n      }\n      else {\n        this.resetMultiplier();\n        clearInterval(this.randomCardIntervalId);\n        this.timeToRandomInMs = this.initialTimeToRandom;\n        this.randomWithNewTime();\n        this.score -= this.penaltyScore;\n        if (this.score <= 0) {\n          this.score = 0;\n        }\n      }\n    } else {\n      console.log(this.timerInMs / 1000);\n    }\n    return this.score;\n  }\n\n  private resetMultiplier() {\n    this.countSuccessClicks = 0;\n    this.scoreMultiplier = 1;\n  }\n\n  private handleMultiplier() {\n    // increases multiplier\n    this.scoreMultiplier++;\n    // replaces maxMultiplier \n    if (this.scoreMultiplier > this.maxMultiplier) {\n      this.maxMultiplier = this.scoreMultiplier;\n    }\n    // reset click count\n    this.countSuccessClicks = 0;\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Scores } from '../app/scores/scores.model';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ScoreCardService {\n  private url: string = 'https://peaceful-basin-27707.herokuapp.com';\n  constructor(private http : HttpClient) { }\n  \n  getScores(){\n    return this.http.get(this.url+'/scores');\n  }\n\n  postScores(score:Scores){\n    return this.http.post(this.url+'/scores',score);\n  }\n}\n"],"sourceRoot":""}